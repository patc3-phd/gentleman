% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataprep.R
\name{get_fuzzy_match}
\alias{get_fuzzy_match}
\title{Fuzzy-match strings}
\usage{
get_fuzzy_match(
  old,
  new,
  method = c("osa", "lv", "dl", "lcs", "qgram", "cosine", "jaccard", "jw"),
  nthread = parallel::detectCores() - 1
)
}
\arguments{
\item{old}{(character) vector of strings to fuzzy-match}

\item{new}{(character) vector of strings to use as possible matches}

\item{method}{method used to calculate distances between strings (see Details)}

\item{nthread}{number of parallel threads (default all minus 1)}
}
\value{
(character) strings in \code{old} replaced with best matches in \code{new}
}
\description{
This function returns the fuzzy matches for a character vector using a pool
of potential matches. The distance between each string and each candidate
in the pool is calculated using a specified method, and the candidate with
the shortest distance to each string is returned.
}
\details{
This function uses \code{\link[stringdist:stringdist]{stringdist::stringdistmatrix()}} to calculate distances
between each requested string in \code{old} and the candidates in \code{new}. The method
is one of the following: \code{osa} (default), \code{lv}, \code{dl}, \code{lcs}, \code{qgram}, \code{cosine},
\code{jaccard}, or \code{jw}. See the corresponding \code{\link[stringdist:stringdist]{stringdist::stringdistmatrix()}}
documentation.
}
\examples{
\dontrun{
df$Country <- df$Country |> get_fuzzy_match(new=list_of_countries)
}

}
\concept{data_prep}
