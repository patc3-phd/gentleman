% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml.R
\name{remove_target_from_test_and_add_ref_to_env}
\alias{remove_target_from_test_and_add_ref_to_env}
\title{Remove target from test set and back up values in reference table}
\usage{
remove_target_from_test_and_add_ref_to_env(tt, target, unique_id, ref_name)
}
\arguments{
\item{tt}{train-test list (see \code{\link[=ttsplit]{ttsplit()}})}

\item{target}{(character) name of target variable}

\item{unique_id}{(character) name of unique ID variable}

\item{ref_name}{(character) name of new variable that stores mapping between ID and target}
}
\value{
\code{tt} with target replaced with \code{NA} in \code{$test},
and \code{ref_name} added to global environment
}
\description{
This function removes the target values from the test set (replacing with \code{NA})
and backs up the values in a new variable in the global environment. This is particularly
useful to avoid target leakage (i.e. accidentally using the target value during testing).
}
\note{
This function implements the method described in
\href{https://en.d22consulting.com/quantcafe/preventing-target-leakage}{Preventing Target Leakage} (D22 QuantCaf√©, 2021).
}
\examples{
tt <- df |>
   dplyr::mutate(id=1:nrow(df)) |>
   ttsplit() |>
   remove_target_from_test_and_add_ref_to_env("y1", "id", "target_values")

}
\seealso{
\code{\link[=add_target_back_to_test_set_from_ref_table]{add_target_back_to_test_set_from_ref_table()}}
}
